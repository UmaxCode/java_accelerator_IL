pipeline {
	agent any

	environment {
		// Define any environment variables here if needed
		DOCKER_HUB_REPO = "umaxcode/jenkins-lab"
		WORK_SPACE = "src/main/java/org/umaxcode/crud-app-with-jenkins"
	}

	stages {
		stage('Checkout') {
			steps {
				// Checkout source code from your repository
				script {
					def gitRepoUrl = "https://github.com/UmaxCode/java_accelerator_IL.git"
					checkout([$class: 'GitSCM',
					branches: [[name: '*/week-four-lab']],
					userRemoteConfigs: [[url: gitRepoUrl]]])
					extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CloneOption', noTags: false, shallow:true, depth: 1]]
				}
			}
		}
		stage('Build') {
			steps {
				// Build the java application using Maven
				dir("${WORK_SPACE}"){
					sh 'chmod +x mvnw'
					sh './mvnw clean package -DskipTests'
				}
			}
		}
		stage('Test') {
			steps {
				// Run tests using Maven
				dir("${WORK_SPACE}"){
					sh './mvnw test'
				}
			}
		}
		stage('Docker Build') {
			steps {
				// Build the Docker image
				dir("${WORK_SPACE}"){
					sh 'docker build -t ${DOCKER_HUB_REPO}:${BUILD_NUMBER} .'
				}
			}
		}
		stage('Docker Push') {
			steps {
				// Push the Docker image to Docker Hub
				withCredentials([usernamePassword(credentialsId: params.CREDENTIALS_ID,
					usernameVariable: 'DOCKER_USERNAME',
					passwordVariable: 'DOCKER_PASSWORD')]) {
					sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
                        docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}
                    '''
				}
			}
		}
	}
	post {
		success {
			echo 'Pipeline completed successfully!'
		}
		failure {
			echo 'Pipeline failed. Check the logs for details.'
		}
	}
}